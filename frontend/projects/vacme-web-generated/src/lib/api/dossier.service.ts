/**
 * Generated VacMe API
 * Generated using custom templates to be found under vacme-web-generated/src/templates.
 *
 * The version of the OpenAPI document: 999.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { DashboardJaxTS } from '../model/dashboard-jax';
// @ts-ignore
import { ErkrankungJaxTS } from '../model/erkrankung-jax';
// @ts-ignore
import { FileInfoJaxTS } from '../model/file-info-jax';
// @ts-ignore
import { ImpfdossierSummaryJaxTS } from '../model/impfdossier-summary-jax';
// @ts-ignore
import { ImpfdossiersOverviewJaxTS } from '../model/impfdossiers-overview-jax';
// @ts-ignore
import { ImpffolgeTS } from '../model/impffolge';
// @ts-ignore
import { ImpfslotJaxTS } from '../model/impfslot-jax';
// @ts-ignore
import { KrankheitIdentifierTS } from '../model/krankheit-identifier';
// @ts-ignore
import { KundengruppeFilterTS } from '../model/kundengruppe-filter';
// @ts-ignore
import { NextFreierTerminJaxTS } from '../model/next-freier-termin-jax';
// @ts-ignore
import { OrtDerImpfungBuchungJaxTS } from '../model/ort-der-impfung-buchung-jax';
// @ts-ignore
import { OrtDerImpfungDisplayNameExtendedJaxTS } from '../model/ort-der-impfung-display-name-extended-jax';
// @ts-ignore
import { OrtDerImpfungDisplayNameJaxTS } from '../model/ort-der-impfung-display-name-jax';
// @ts-ignore
import { RegistrierungBasicInfoJaxTS } from '../model/registrierung-basic-info-jax';
// @ts-ignore
import { RegistrierungsCodeJaxTS } from '../model/registrierungs-code-jax';
// @ts-ignore
import { SelectOrtDerImpfungJaxTS } from '../model/select-ort-der-impfung-jax';
// @ts-ignore
import { TerminbuchungJaxTS } from '../model/terminbuchung-jax';
// @ts-ignore
import { ZertifikatJaxTS } from '../model/zertifikat-jax';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class DossierService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key,
                        (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * @param fileId 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blobResourceDownloadFile(fileId: string, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public blobResourceDownloadFile(fileId: string, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public blobResourceDownloadFile(fileId: string, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public blobResourceDownloadFile(fileId: string, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (fileId === null || fileId === undefined) {
            throw new Error('Required parameter fileId was null or undefined when calling blobResourceDownloadFile.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling blobResourceDownloadFile.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.get(`${this.configuration.basePath}/api/v1/web/blob/registrierungsnummer/${encodeURIComponent(String(registrierungsnummer))}/file/${encodeURIComponent(String(fileId))}`,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public blobResourceUpload(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<FileInfoJaxTS>>;
    public blobResourceUpload(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<FileInfoJaxTS>>>;
    public blobResourceUpload(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<FileInfoJaxTS>>>;
    public blobResourceUpload(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling blobResourceUpload.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling blobResourceUpload.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<Array<FileInfoJaxTS>>(`${this.configuration.basePath}/api/v1/web/blob/krankheit/${encodeURIComponent(String(krankheit))}/registrierungsnummer/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceCreateAndDownload(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceCreateAndDownload(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceCreateAndDownload(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceCreateAndDownload(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceCreateAndDownload.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<any>(`${this.configuration.basePath}/api/v1/web/dossier/create/zertifikat/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceCreateImpfdossier.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceCreateImpfdossier.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<any>(`${this.configuration.basePath}/api/v1/web/dossier/dashboard/${encodeURIComponent(String(registrierungsnummer))}/krankheit/${encodeURIComponent(String(krankheit))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceDeleteRegistrierung(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceDeleteRegistrierung(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceDeleteRegistrierung(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceDeleteRegistrierung(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceDeleteRegistrierung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.delete<any>(`${this.configuration.basePath}/api/v1/web/dossier/deleteRegistrierung/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceDownloadZertifikat(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceDownloadZertifikat(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceDownloadZertifikat(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceDownloadZertifikat(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceDownloadZertifikat.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.get(`${this.configuration.basePath}/api/v1/web/dossier/download/zertifikat/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param zertifikatid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceDownloadZertifikatWithId.');
        }
        if (zertifikatid === null || zertifikatid === undefined) {
            throw new Error('Required parameter zertifikatid was null or undefined when calling dossierResourceDownloadZertifikatWithId.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.get(`${this.configuration.basePath}/api/v1/web/dossier/download/zertifikatwithid/${encodeURIComponent(String(zertifikatid))}/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceGetAllZertifikate(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ZertifikatJaxTS>>;
    public dossierResourceGetAllZertifikate(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ZertifikatJaxTS>>>;
    public dossierResourceGetAllZertifikate(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ZertifikatJaxTS>>>;
    public dossierResourceGetAllZertifikate(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceGetAllZertifikate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<Array<ZertifikatJaxTS>>(`${this.configuration.basePath}/api/v1/web/dossier/list/zertifikate/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceGetDashboardImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<DashboardJaxTS>;
    public dossierResourceGetDashboardImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<DashboardJaxTS>>;
    public dossierResourceGetDashboardImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<DashboardJaxTS>>;
    public dossierResourceGetDashboardImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceGetDashboardImpfdossier.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceGetDashboardImpfdossier.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<DashboardJaxTS>(`${this.configuration.basePath}/api/v1/web/dossier/dashboard/${encodeURIComponent(String(registrierungsnummer))}/krankheit/${encodeURIComponent(String(krankheit))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceGetDashboardRegistrierung(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<DashboardJaxTS>;
    public dossierResourceGetDashboardRegistrierung(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<DashboardJaxTS>>;
    public dossierResourceGetDashboardRegistrierung(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<DashboardJaxTS>>;
    public dossierResourceGetDashboardRegistrierung(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceGetDashboardRegistrierung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<DashboardJaxTS>(`${this.configuration.basePath}/api/v1/web/dossier/dashboard/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt die Metainfos der hochgeladenen Files zurueck
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceGetFileInfo(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<FileInfoJaxTS>>;
    public dossierResourceGetFileInfo(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<FileInfoJaxTS>>>;
    public dossierResourceGetFileInfo(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<FileInfoJaxTS>>>;
    public dossierResourceGetFileInfo(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceGetFileInfo.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceGetFileInfo.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<Array<FileInfoJaxTS>>(`${this.configuration.basePath}/api/v1/web/dossier/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}/fileinfo`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceGetImpfdossiersOverview(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ImpfdossiersOverviewJaxTS>;
    public dossierResourceGetImpfdossiersOverview(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ImpfdossiersOverviewJaxTS>>;
    public dossierResourceGetImpfdossiersOverview(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ImpfdossiersOverviewJaxTS>>;
    public dossierResourceGetImpfdossiersOverview(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceGetImpfdossiersOverview.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<ImpfdossiersOverviewJaxTS>(`${this.configuration.basePath}/api/v1/web/dossier/dossier-overview/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Gibt die benutzername fuer registrierung zurueck
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceGetUsername(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<string>;
    public dossierResourceGetUsername(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<HttpResponse<string>>;
    public dossierResourceGetUsername(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<HttpEvent<string>>;
    public dossierResourceGetUsername(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceGetUsername.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<string>(`${this.configuration.basePath}/api/v1/web/dossier/${encodeURIComponent(String(registrierungsnummer))}/username`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceIsZertifikatEnabled(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<boolean>;
    public dossierResourceIsZertifikatEnabled(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public dossierResourceIsZertifikatEnabled(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public dossierResourceIsZertifikatEnabled(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<boolean>(`${this.configuration.basePath}/api/v1/web/dossier/isZertifikatEnabled`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegAcceptLeistungserbringerAgb(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ImpfdossierSummaryJaxTS>;
    public dossierResourceRegAcceptLeistungserbringerAgb(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ImpfdossierSummaryJaxTS>>;
    public dossierResourceRegAcceptLeistungserbringerAgb(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ImpfdossierSummaryJaxTS>>;
    public dossierResourceRegAcceptLeistungserbringerAgb(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegAcceptLeistungserbringerAgb.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegAcceptLeistungserbringerAgb.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<ImpfdossierSummaryJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/accept-leistungserbringer-agb/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param selbstzahler 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegChangeSelbstzahler(registrierungsnummer: string, selbstzahler: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegChangeSelbstzahler(registrierungsnummer: string, selbstzahler: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegChangeSelbstzahler(registrierungsnummer: string, selbstzahler: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegChangeSelbstzahler(registrierungsnummer: string, selbstzahler: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegChangeSelbstzahler.');
        }
        if (selbstzahler === null || selbstzahler === undefined) {
            throw new Error('Required parameter selbstzahler was null or undefined when calling dossierResourceRegChangeSelbstzahler.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/selbstzahler/${encodeURIComponent(String(registrierungsnummer))}/${encodeURIComponent(String(selbstzahler))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegChangeToMobil(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegChangeToMobil(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegChangeToMobil(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegChangeToMobil(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegChangeToMobil.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/mobil/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDeleteBenutzer(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegDeleteBenutzer(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegDeleteBenutzer(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegDeleteBenutzer(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.delete<any>(`${this.configuration.basePath}/api/v1/reg/dossier/deleteBenutzer`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDeleteRegistrierung(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegDeleteRegistrierung(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegDeleteRegistrierung(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegDeleteRegistrierung(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegDeleteRegistrierung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.delete<any>(`${this.configuration.basePath}/api/v1/reg/dossier/deleteRegistrierung/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDownloadBestZertifikatForRegistrierung(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceRegDownloadBestZertifikatForRegistrierung(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceRegDownloadBestZertifikatForRegistrierung(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceRegDownloadBestZertifikatForRegistrierung(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegDownloadBestZertifikatForRegistrierung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.post(`${this.configuration.basePath}/api/v1/reg/dossier/download/zertifikat/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDownloadImpfdokumentation(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceRegDownloadImpfdokumentation(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceRegDownloadImpfdokumentation(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceRegDownloadImpfdokumentation(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegDownloadImpfdokumentation.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegDownloadImpfdokumentation.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.post(`${this.configuration.basePath}/api/v1/reg/dossier/download/impfdokumentation/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDownloadRegistrierungsbestaetigung(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceRegDownloadRegistrierungsbestaetigung(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceRegDownloadRegistrierungsbestaetigung(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceRegDownloadRegistrierungsbestaetigung(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegDownloadRegistrierungsbestaetigung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.post(`${this.configuration.basePath}/api/v1/reg/dossier/download/registrierungsbestaetigung/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDownloadTerminbestaetigung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceRegDownloadTerminbestaetigung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceRegDownloadTerminbestaetigung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceRegDownloadTerminbestaetigung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegDownloadTerminbestaetigung.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegDownloadTerminbestaetigung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.post(`${this.configuration.basePath}/api/v1/reg/dossier/download/terminbestaetigung/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param zertifikatid 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<Blob>;
    public dossierResourceRegDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpResponse<Blob>>;
    public dossierResourceRegDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<HttpEvent<Blob>>;
    public dossierResourceRegDownloadZertifikatWithId(registrierungsnummer: string, zertifikatid: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/octet-stream', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegDownloadZertifikatWithId.');
        }
        if (zertifikatid === null || zertifikatid === undefined) {
            throw new Error('Required parameter zertifikatid was null or undefined when calling dossierResourceRegDownloadZertifikatWithId.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/octet-stream'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }



    return this.httpClient.get(`${this.configuration.basePath}/api/v1/reg/dossier/download/zertifikatwithid/${encodeURIComponent(String(zertifikatid))}/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: 'blob',
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param kundengruppe 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetAllOrteDerImpfungDisplayName(krankheit: KrankheitIdentifierTS, kundengruppe: KundengruppeFilterTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<OrtDerImpfungDisplayNameExtendedJaxTS>>;
    public dossierResourceRegGetAllOrteDerImpfungDisplayName(krankheit: KrankheitIdentifierTS, kundengruppe: KundengruppeFilterTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<OrtDerImpfungDisplayNameExtendedJaxTS>>>;
    public dossierResourceRegGetAllOrteDerImpfungDisplayName(krankheit: KrankheitIdentifierTS, kundengruppe: KundengruppeFilterTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<OrtDerImpfungDisplayNameExtendedJaxTS>>>;
    public dossierResourceRegGetAllOrteDerImpfungDisplayName(krankheit: KrankheitIdentifierTS, kundengruppe: KundengruppeFilterTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetAllOrteDerImpfungDisplayName.');
        }
        if (kundengruppe === null || kundengruppe === undefined) {
            throw new Error('Required parameter kundengruppe was null or undefined when calling dossierResourceRegGetAllOrteDerImpfungDisplayName.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegGetAllOrteDerImpfungDisplayName.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<Array<OrtDerImpfungDisplayNameExtendedJaxTS>>(`${this.configuration.basePath}/api/v1/reg/dossier/odi/all/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}/${encodeURIComponent(String(kundengruppe))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetAllOrteDerImpfungForImpfterminclient(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<OrtDerImpfungDisplayNameJaxTS>>;
    public dossierResourceRegGetAllOrteDerImpfungForImpfterminclient(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<OrtDerImpfungDisplayNameJaxTS>>>;
    public dossierResourceRegGetAllOrteDerImpfungForImpfterminclient(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<OrtDerImpfungDisplayNameJaxTS>>>;
    public dossierResourceRegGetAllOrteDerImpfungForImpfterminclient(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<Array<OrtDerImpfungDisplayNameJaxTS>>(`${this.configuration.basePath}/api/v1/reg/dossier/impfterminclient/odi`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetAllZertifikate(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ZertifikatJaxTS>>;
    public dossierResourceRegGetAllZertifikate(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ZertifikatJaxTS>>>;
    public dossierResourceRegGetAllZertifikate(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ZertifikatJaxTS>>>;
    public dossierResourceRegGetAllZertifikate(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegGetAllZertifikate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<Array<ZertifikatJaxTS>>(`${this.configuration.basePath}/api/v1/reg/dossier/list/zertifikate/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetDashboardRegistrierung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<DashboardJaxTS>;
    public dossierResourceRegGetDashboardRegistrierung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<DashboardJaxTS>>;
    public dossierResourceRegGetDashboardRegistrierung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<DashboardJaxTS>>;
    public dossierResourceRegGetDashboardRegistrierung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetDashboardRegistrierung.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegGetDashboardRegistrierung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<DashboardJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/dashboard/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param onboardingCode 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetDashboardRegistrierungByOnboardingCode(onboardingCode: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<RegistrierungsCodeJaxTS>;
    public dossierResourceRegGetDashboardRegistrierungByOnboardingCode(onboardingCode: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<RegistrierungsCodeJaxTS>>;
    public dossierResourceRegGetDashboardRegistrierungByOnboardingCode(onboardingCode: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<RegistrierungsCodeJaxTS>>;
    public dossierResourceRegGetDashboardRegistrierungByOnboardingCode(onboardingCode: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (onboardingCode === null || onboardingCode === undefined) {
            throw new Error('Required parameter onboardingCode was null or undefined when calling dossierResourceRegGetDashboardRegistrierungByOnboardingCode.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<RegistrierungsCodeJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/onboarding/dashboard/${encodeURIComponent(String(onboardingCode))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param impffolge 
     * @param krankheit 
     * @param ortDerImpfungId 
     * @param nextFreierTerminJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetFreieImpftermine(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<ImpfslotJaxTS>>;
    public dossierResourceRegGetFreieImpftermine(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<ImpfslotJaxTS>>>;
    public dossierResourceRegGetFreieImpftermine(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<ImpfslotJaxTS>>>;
    public dossierResourceRegGetFreieImpftermine(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (impffolge === null || impffolge === undefined) {
            throw new Error('Required parameter impffolge was null or undefined when calling dossierResourceRegGetFreieImpftermine.');
        }
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetFreieImpftermine.');
        }
        if (ortDerImpfungId === null || ortDerImpfungId === undefined) {
            throw new Error('Required parameter ortDerImpfungId was null or undefined when calling dossierResourceRegGetFreieImpftermine.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<Array<ImpfslotJaxTS>>(`${this.configuration.basePath}/api/v1/reg/dossier/termine/frei/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(ortDerImpfungId))}/${encodeURIComponent(String(impffolge))}`,
        nextFreierTerminJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetImpfdossiersOverview(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ImpfdossiersOverviewJaxTS>;
    public dossierResourceRegGetImpfdossiersOverview(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ImpfdossiersOverviewJaxTS>>;
    public dossierResourceRegGetImpfdossiersOverview(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ImpfdossiersOverviewJaxTS>>;
    public dossierResourceRegGetImpfdossiersOverview(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegGetImpfdossiersOverview.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<ImpfdossiersOverviewJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/dossier-overview/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param impffolge 
     * @param krankheit 
     * @param ortDerImpfungId 
     * @param nextFreierTerminJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetNextFreierImpftermin(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<NextFreierTerminJaxTS>;
    public dossierResourceRegGetNextFreierImpftermin(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<NextFreierTerminJaxTS>>;
    public dossierResourceRegGetNextFreierImpftermin(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<NextFreierTerminJaxTS>>;
    public dossierResourceRegGetNextFreierImpftermin(impffolge: ImpffolgeTS, krankheit: KrankheitIdentifierTS, ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (impffolge === null || impffolge === undefined) {
            throw new Error('Required parameter impffolge was null or undefined when calling dossierResourceRegGetNextFreierImpftermin.');
        }
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetNextFreierImpftermin.');
        }
        if (ortDerImpfungId === null || ortDerImpfungId === undefined) {
            throw new Error('Required parameter ortDerImpfungId was null or undefined when calling dossierResourceRegGetNextFreierImpftermin.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<NextFreierTerminJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/termine/nextfrei/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(ortDerImpfungId))}/${encodeURIComponent(String(impffolge))}`,
        nextFreierTerminJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param ortDerImpfungId 
     * @param nextFreierTerminJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetNextFreierZweitterminUmbuchung(ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<NextFreierTerminJaxTS>;
    public dossierResourceRegGetNextFreierZweitterminUmbuchung(ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<NextFreierTerminJaxTS>>;
    public dossierResourceRegGetNextFreierZweitterminUmbuchung(ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<NextFreierTerminJaxTS>>;
    public dossierResourceRegGetNextFreierZweitterminUmbuchung(ortDerImpfungId: string, nextFreierTerminJaxTS?: NextFreierTerminJaxTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ortDerImpfungId === null || ortDerImpfungId === undefined) {
            throw new Error('Required parameter ortDerImpfungId was null or undefined when calling dossierResourceRegGetNextFreierZweitterminUmbuchung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<NextFreierTerminJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/termine/nextfrei/${encodeURIComponent(String(ortDerImpfungId))}/umbuchung`,
        nextFreierTerminJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetOrCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ImpfdossierSummaryJaxTS>;
    public dossierResourceRegGetOrCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ImpfdossierSummaryJaxTS>>;
    public dossierResourceRegGetOrCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ImpfdossierSummaryJaxTS>>;
    public dossierResourceRegGetOrCreateImpfdossier(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetOrCreateImpfdossier.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegGetOrCreateImpfdossier.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<ImpfdossierSummaryJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/impfdossier/${encodeURIComponent(String(registrierungsnummer))}/krankheit/${encodeURIComponent(String(krankheit))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param odiId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetOrtDerImpfungBuchung(krankheit: KrankheitIdentifierTS, odiId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<OrtDerImpfungBuchungJaxTS>;
    public dossierResourceRegGetOrtDerImpfungBuchung(krankheit: KrankheitIdentifierTS, odiId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<OrtDerImpfungBuchungJaxTS>>;
    public dossierResourceRegGetOrtDerImpfungBuchung(krankheit: KrankheitIdentifierTS, odiId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<OrtDerImpfungBuchungJaxTS>>;
    public dossierResourceRegGetOrtDerImpfungBuchung(krankheit: KrankheitIdentifierTS, odiId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetOrtDerImpfungBuchung.');
        }
        if (odiId === null || odiId === undefined) {
            throw new Error('Required parameter odiId was null or undefined when calling dossierResourceRegGetOrtDerImpfungBuchung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<OrtDerImpfungBuchungJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/odibuchung/${encodeURIComponent(String(odiId))}/krankheit/${encodeURIComponent(String(krankheit))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param code 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetQrCode(code: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegGetQrCode(code: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegGetQrCode(code: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegGetQrCode(code: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling dossierResourceRegGetQrCode.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<any>(`${this.configuration.basePath}/api/v1/reg/dossier/qr-code/${encodeURIComponent(String(code))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param code 
     * @param krankheit 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegGetQrCodeWithKrankheit(code: string, krankheit: KrankheitIdentifierTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegGetQrCodeWithKrankheit(code: string, krankheit: KrankheitIdentifierTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegGetQrCodeWithKrankheit(code: string, krankheit: KrankheitIdentifierTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegGetQrCodeWithKrankheit(code: string, krankheit: KrankheitIdentifierTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling dossierResourceRegGetQrCodeWithKrankheit.');
        }
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegGetQrCodeWithKrankheit.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<any>(`${this.configuration.basePath}/api/v1/reg/dossier/qr-code/${encodeURIComponent(String(code))}/${encodeURIComponent(String(krankheit))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegIsZertifikatEnabled(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<boolean>;
    public dossierResourceRegIsZertifikatEnabled(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<boolean>>;
    public dossierResourceRegIsZertifikatEnabled(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<boolean>>;
    public dossierResourceRegIsZertifikatEnabled(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<boolean>(`${this.configuration.basePath}/api/v1/reg/dossier/isZertifikatEnabled`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegOdiAndTermineAbsagen(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegOdiAndTermineAbsagen(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegOdiAndTermineAbsagen(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegOdiAndTermineAbsagen(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegOdiAndTermineAbsagen.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegOdiAndTermineAbsagen.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.delete<any>(`${this.configuration.basePath}/api/v1/reg/dossier/cancel/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegRecreatePerPost(registrierungId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegRecreatePerPost(registrierungId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegRecreatePerPost(registrierungId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegRecreatePerPost(registrierungId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungId === null || registrierungId === undefined) {
            throw new Error('Required parameter registrierungId was null or undefined when calling dossierResourceRegRecreatePerPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<any>(`${this.configuration.basePath}/api/v1/reg/dossier/${encodeURIComponent(String(registrierungId))}/zertifikat/resend`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param impffolge 
     * @param impfslotId 
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegReservieren(impffolge: ImpffolgeTS, impfslotId: string, krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegReservieren(impffolge: ImpffolgeTS, impfslotId: string, krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegReservieren(impffolge: ImpffolgeTS, impfslotId: string, krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegReservieren(impffolge: ImpffolgeTS, impfslotId: string, krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (impffolge === null || impffolge === undefined) {
            throw new Error('Required parameter impffolge was null or undefined when calling dossierResourceRegReservieren.');
        }
        if (impfslotId === null || impfslotId === undefined) {
            throw new Error('Required parameter impfslotId was null or undefined when calling dossierResourceRegReservieren.');
        }
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegReservieren.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegReservieren.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/reservieren/${encodeURIComponent(String(registrierungsnummer))}/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(impfslotId))}/${encodeURIComponent(String(impffolge))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegSelectNichtVerwalteterOrtDerImpfung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegSelectNichtVerwalteterOrtDerImpfung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegSelectNichtVerwalteterOrtDerImpfung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegSelectNichtVerwalteterOrtDerImpfung(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegSelectNichtVerwalteterOrtDerImpfung.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegSelectNichtVerwalteterOrtDerImpfung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/selectNichtVerwalteterOdi/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param selectOrtDerImpfungJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegSelectOrtDerImpfung(krankheit: KrankheitIdentifierTS, selectOrtDerImpfungJaxTS?: SelectOrtDerImpfungJaxTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegSelectOrtDerImpfung(krankheit: KrankheitIdentifierTS, selectOrtDerImpfungJaxTS?: SelectOrtDerImpfungJaxTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegSelectOrtDerImpfung(krankheit: KrankheitIdentifierTS, selectOrtDerImpfungJaxTS?: SelectOrtDerImpfungJaxTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegSelectOrtDerImpfung(krankheit: KrankheitIdentifierTS, selectOrtDerImpfungJaxTS?: SelectOrtDerImpfungJaxTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegSelectOrtDerImpfung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/krankheit/${encodeURIComponent(String(krankheit))}/selectOdi`,
        selectOrtDerImpfungJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegSetTimestampPhonenumberUpdate(registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegSetTimestampPhonenumberUpdate(registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegSetTimestampPhonenumberUpdate(registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegSetTimestampPhonenumberUpdate(registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegSetTimestampPhonenumberUpdate.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/phoneNumberUpdate/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param krankheit 
     * @param registrierungsnummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegTerminbestaetigungErneutSenden(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<RegistrierungsCodeJaxTS>;
    public dossierResourceRegTerminbestaetigungErneutSenden(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<RegistrierungsCodeJaxTS>>;
    public dossierResourceRegTerminbestaetigungErneutSenden(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<RegistrierungsCodeJaxTS>>;
    public dossierResourceRegTerminbestaetigungErneutSenden(krankheit: KrankheitIdentifierTS, registrierungsnummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (krankheit === null || krankheit === undefined) {
            throw new Error('Required parameter krankheit was null or undefined when calling dossierResourceRegTerminbestaetigungErneutSenden.');
        }
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegTerminbestaetigungErneutSenden.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<RegistrierungsCodeJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/terminbestaetigung/erneutsenden/krankheit/${encodeURIComponent(String(krankheit))}/${encodeURIComponent(String(registrierungsnummer))}`,
        null,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param terminbuchungJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegTermineBuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegTermineBuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegTermineBuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegTermineBuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/buchen`,
        terminbuchungJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param terminbuchungJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegUmbuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public dossierResourceRegUmbuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public dossierResourceRegUmbuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public dossierResourceRegUmbuchen(terminbuchungJaxTS?: TerminbuchungJaxTS, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.put<any>(`${this.configuration.basePath}/api/v1/reg/dossier/umbuchen`,
        terminbuchungJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param registrierungsnummer 
     * @param rollback 
     * @param erkrankungJaxTS 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceRegUpdateErkrankungen(registrierungsnummer: string, rollback: boolean, erkrankungJaxTS?: Array<ErkrankungJaxTS>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<DashboardJaxTS>;
    public dossierResourceRegUpdateErkrankungen(registrierungsnummer: string, rollback: boolean, erkrankungJaxTS?: Array<ErkrankungJaxTS>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<DashboardJaxTS>>;
    public dossierResourceRegUpdateErkrankungen(registrierungsnummer: string, rollback: boolean, erkrankungJaxTS?: Array<ErkrankungJaxTS>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<DashboardJaxTS>>;
    public dossierResourceRegUpdateErkrankungen(registrierungsnummer: string, rollback: boolean, erkrankungJaxTS?: Array<ErkrankungJaxTS>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (registrierungsnummer === null || registrierungsnummer === undefined) {
            throw new Error('Required parameter registrierungsnummer was null or undefined when calling dossierResourceRegUpdateErkrankungen.');
        }
        if (rollback === null || rollback === undefined) {
            throw new Error('Required parameter rollback was null or undefined when calling dossierResourceRegUpdateErkrankungen.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.post<DashboardJaxTS>(`${this.configuration.basePath}/api/v1/reg/dossier/erkrankungen/${encodeURIComponent(String(registrierungsnummer))}/${encodeURIComponent(String(rollback))}`,
        erkrankungJaxTS,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * @param kvkNummer 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public dossierResourceSearchDashboardRegistrierung(kvkNummer: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<Array<RegistrierungBasicInfoJaxTS>>;
    public dossierResourceSearchDashboardRegistrierung(kvkNummer: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<Array<RegistrierungBasicInfoJaxTS>>>;
    public dossierResourceSearchDashboardRegistrierung(kvkNummer: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<Array<RegistrierungBasicInfoJaxTS>>>;
    public dossierResourceSearchDashboardRegistrierung(kvkNummer: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (kvkNummer === null || kvkNummer === undefined) {
            throw new Error('Required parameter kvkNummer was null or undefined when calling dossierResourceSearchDashboardRegistrierung.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }


    return this.httpClient.get<Array<RegistrierungBasicInfoJaxTS>>(`${this.configuration.basePath}/api/v1/web/dossier/dashboard/kvk-nummer/${encodeURIComponent(String(kvkNummer))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
