quarkus.application.name=vacme-rest

vacme.stufe=${VACME_STUFE}
vacme.mandant=${VACME_MANDANT}

vacme.fachapplikation.url=${VACME_FACHAPPLIKATION_URL}
vacme.fachapplikation.blog.url=${VACME_BLOG_URL}

vacme.admin.mail=${VACME_ADMIN_MAIL}
vacme.cc.zuwenige.zweittermine.mail=${VACME_CC_ZUWENIGE_ZWEITTERMINE_MAIL}
vacme.service.reporting.anzahlzweitbooster.mail=${VACME_SERVICE_REPORTING_ANZAHLZWEITBOOSTER_MAIL}
vacme.service.reporting.anzahl.impfungen.fsme.galenica.recipients=${VACME_SERVICE_REPORTING_ANZAHL_IMPFUNGEN_FSME_GALENICA_RECIPIENTS}
vacme.mail.reporting.anzahl.zweitbooster.disabled=${VACME_MAIL_REPORTING_ANZAHLZWEITBOOSTER_DISABLED}
vacme.mail.reporting.anzahl.impfungen.disabled=${VACME_MAIL_REPORTING_ANZAHL_IMPFUNGEN_DISABLED}
vacme.min.impftermin.for.meldung=${VACME_MIN_IMPFTERMIN_FOR_MELDUNG}

#standard database for vacme
quarkus.datasource.db-kind=mariadb
quarkus.datasource.username=${VACME_DB_USERNAME}
quarkus.datasource.password=${VACME_DB_PASSWORD}
quarkus.datasource.jdbc.url=${VACME_DB_URL}

# database properties to enable tracing
quarkus.datasource.jdbc.driver=io.opentelemetry.instrumentation.jdbc.OpenTelemetryDriver
quarkus.hibernate.orm.dialect=org.hibernate.dialect.MariaDB103Dialect


vacme.force.cookie.secure.flag=false

quarkus.datasource.jdbc.max-size=80
quarkus.datasource.jdbc.acquisition-timeout=8
quarkus.datasource.jdbc.background-validation-interval=10s

# increase worker pool size
quarkus.vertx.worker-pool-size=30

# increase maximum body request size
quarkus.http.limits.max-body-size=21m

# metrics
quarkus.datasource.metrics.enabled=true
quarkus.datasource.jdbc.enable-metrics=true

# drop and create the database at startup (use `update` to only update the schema, drop-and-create to recreate)
quarkus.hibernate-orm.database.generation=none
# output the create script for integration test db reset if we are in dev mode
%dev.quarkus.hibernate-orm.scripts.generation=create
%dev.quarkus.hibernate-orm.scripts.generation.create-target=src/main/resources/db/test-migration/V1.0.0__test-init.sql

# Let's make sure we don't wipe the production data by accident!
quarkus.hibernate-orm.sql-load-script=no-file


#quarkus.oidc.client-id=vacme-rest-api
vacme.keycloak.config.reg=${VACME_KEYCLOAK_CONFIG_REG}
vacme.keycloak.config.web=${VACME_KEYCLOAK_CONFIG_WEB}
quarkus.oidc.enabled=true

# quarkus.oidc.auth-server-url=https://vacme-dev.dvbern.ch/auth/realms/vacme
quarkus.oidc.auth-server-url=${VACME_OIDC_WEB_AUTH_SERVER_URL}
quarkus.oidc.client-id=${VACME_OIDC_WEB_CLIENT_ID}

quarkus.oidc.reg.auth-server-url=${VACME_OIDC_REG_AUTH_SERVER_URL}
quarkus.oidc.reg.client-id=${VACME_OIDC_REG_CLIENT_ID}
#quarkus.oidc.reg.token.lifespan-grace=5s


#pfad im json wo das rollenarray drin steht
#quarkus.oidc.roles.role-claim-path=realm_access.roles

#This means that requests with an invalid credential will always be rejected, even for public pages. You can change this behavior and only authenticate when required by setting \
quarkus.http.auth.proactive=false

# Health endpoint
quarkus.smallrye-health.root-path=/health

# Health query timeout
vacme.healthcheck.query.timeout=290


#Disable all security
vacme.authorization.disable=false

vacme.validation.kontrolle.disallow.sameday=true

vacme.validation.impfung.disallow.sameday=true

# Gueltigkeit der Kontrolle in Stunden
vacme.kontrolle.gueltigkeit.hours=4

# CRON jobs
vacme.cron.stat.kennzahlrunner=0 0 */12 * * ?
vacme.cron.stat.dbvalidation=0 0 23 * * ?
vacme.cron.healthcheck.zertifikat.job.lock=0 0 */6 * * ?
vacme.cron.healthcheck.geocoding=0 0 0 * * ?
vacme.cron.stat.vmdl.upload=0 0/1 2-6 * * ?
vacme.cron.service.reporting.anzahlerstimpfungen.mail=0 10 2 1 * ?
vacme.cron.service.reporting.anzahlzweitbooster.mail=0 0 6 ? * WED *
vacme.cron.service.reporting.anzahl.impfungen.mail=0 0 5 ? * WED *
vacme.cron.reservierung.expired.clear=0 20 2 * * ?
vacme.cron.clear.covidcert.tokens=0 0 3 * * ?
vacme.cron.disable.unused.users=0 30 3 * * ?
vacme.cron.handle.kontrolle.abgelaufen=0 */15 * * * ?
vacme.cron.booster.immunisiert.status.move=0 */5 * * * ?
# FreigabeBooster: von 8-18
vacme.cron.booster.freigabe.status.move=0 */5 8-18 * * ?
vacme.cron.booster.engine.recalculate=0 */2 * * * ?
vacme.cron.priority.update=0 15 0 * * ?
vacme.cron.doccreation.cleanup=0 */30 * * * ?
vacme.cron.doccreation.create=30 * * * * ?
vacme.cron.massenverarbeitungqueue.process=0 */2 * * * ?


# configuration for mailing
quarkus.mailer.from=${VACME_MAILER_FROM}
quarkus.mailer.host=${VACME_MAILER_HOST}
quarkus.mailer.port=${VACME_MAILER_PORT}
quarkus.mailer.ssl=${VACME_MAILER_SSL}
quarkus.mailer.username=${VACME_MAILER_USERNAME}
quarkus.mailer.password=${VACME_MAILER_PASSWORD}
quarkus.mailer.mock=${VACME_MAILER_MOCK}
quarkus.mailer.keep-alive-timeout=PT280S

#transaction Timeout erhoehen
quarkus.transaction-manager.default-transaction-timeout=300s

# SMS
vacme.sms.disabled=${VACME_SMS_DISABLED}
vacme.sms.provider=${VACME_SMS_PROVIDER}
vacme.sms.mobile-only=${VACME_SMS_MOBILE_ONLY}
# SMS ECall
vacme.sms.ecall.url=${VACME_SMS_URL}
vacme.sms.ecall.username=${VACME_SMS_USERNAME}
vacme.sms.ecall.password=${VACME_SMS_PASSWORD}
vacme.sms.ecall.jobid=${VACME_SMS_JOB_ID}
vacme.sms.ecall.callback=${VACME_SMS_CALLBACK}
vacme.sms.ecall.callback.ext=${VACME_SMS_EXT_CALLBACK}
# SMS Swissphone
vacme.sms.swissphone.url=${VACME_SMS_SWISSPHONE_URL}
vacme.sms.swissphone.username=${VACME_SMS_SWISSPHONE_USERNAME}
vacme.sms.swissphone.password=${VACME_SMS_SWISSPHONE_PASSWORD}
vacme.sms.swissphone.jobid=${VACME_SMS_SWISSPHONE_JOB_ID}
vacme.sms.swissphone.callback=${VACME_SMS_SWISSPHONE_CALLBACK}
vacme.sms.swissphone.callback.ext=${VACME_SMS_SWISSPHONE_EXT_CALLBACK}

vacme.ftp.disabled=true
vacme.ftp.server=${VACME_FTP_SERVER}
vacme.ftp.port=${VACME_FTP_PORT}
vacme.ftp.username=${VACME_FTP_USERNAME}
vacme.ftp.password=${VACME_FTP_PASSWORD}

# Automatisch abschliessen
vacme.service.automatisch.abschliessen.zeit.days=${VACME_AUTO_ABSCHLIESSEN_ZEIT_DAYS}
vacme.cron.auto.abschliessen=${VACME_CRON_ABSCHLIESSEN}

### Flyway minimal config properties
# True to execute Flyway automatically when the application starts, false otherwise.
quarkus.flyway.migrate-at-start=true
# Comma-separated list of locations to scan recursively for migrations.
quarkus.flyway.locations=classpath:db/migration
# Enable the creation of the history table if it does not exist already.
quarkus.flyway.baseline-on-migrate=true
# The initial baseline version.
quarkus.flyway.baseline-version=0.0.1

#validate the current flyway state on migration
quarkus.flyway.validate-on-migrate=true

quarkus.flyway.repair-at-start=true
# Locale for validator messages: keep in sync with SupportedLocale/SupportedLanguage
quarkus.default-locale=de-CH
quarkus.locales=de-CH,fr-CH,it-CH,en-US

# Log Format with user
quarkus.log.file.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %h %N[%i] %-5p [%c{3.}] (%t) (%X{vacmeuser_id} - %X{vacmeuser_ip}) %s%e%n
quarkus.log.console.format=%d{yyyy-MM-dd HH:mm:ss,SSS} %-5p [%c{3.}] (%t) (%X{vacmeuser_id} - %X{vacmeuser_ip}) %s%e%n

# Hash Service
hashids.alphabet=123456789ABCDEFGHIKLMNPQRSTUVWXYZ
hashids.salt=v@cMeRN0W$
hashids.minLength=6


# Location of openapi yaml spec (default: /openapi)
quarkus.smallrye-openapi.path=/openapi.yml
# generate openapi.yaml here (build + reload)
quarkus.smallrye-openapi.store-schema-directory=target/generated-resources/openapi-schema/
quarkus.smallrye-openapi.security-scheme=oidc
quarkus.smallrye-openapi.oidc-open-id-connect-url=https://vacme-dev.dvbern.ch/auth/realms/vacme/.well-known/openid-configuration
mp.openapi.extensions.smallrye.info.title=Generated VacMe API
mp.openapi.extensions.smallrye.info.description=Generated using custom templates to be found under vacme-web-generated/src/templates.
mp.openapi.extensions.smallrye.info.version=999.0.0
mp.openapi.extensions.smallrye.operationIdStrategy=CLASS_METHOD

# DOCKER Images
# Settings used when running ./mvnw clean package -Dquarkus.container-image.build=true etc.
# see https://quarkus.io/guides/container-image
# in ci this step is triggered separately from the actual build, therefore these settings wont apply
quarkus.container-image.group=vacme
quarkus.container-image.registry=registry.dvbern.ch
quarkus.container-image.additional-tags=latest

# FIXME: Slots nicht fuer ein Kalender Jahr, sondern einfach f\u00FCr +12 Monate. Mit Xaver absprechen
#Impfslot Erstellungs Jahr (default 2021)
# impfslot.year=2021
# Laenge der Slots in Minuten (default 30 Minuten)
impfslot.duration=30
# Impfungsbegin (Stunde) jeden Tages (default 06:00)
impfslot.work.start=6
# Impfungsende (Stunde) jeden Tages (default 22:00)
impfslot.work.end=22

# Terminreservation
vacme.terminreservation.enabled=${VACME_TERMINRESERVATION_ENABLED}
vacme.terminreservation.dauer.in.min=${VACME_TERMINRESERVATION_DAUER_IN_MIN}

# Weitere Einstellungen fuer Terminvergabe
vacme.terminvergabe.random.enabled=${VACME_TERMINVERGABE_RANDOM_ENABLED}
vacme.terminvergabe.lock.enabled=${VACME_TERMINVERGABE_LOCK_ENABLED}

# definiert u.A URL fuer QR Code
vacme.server.base.url=${VACME_SERVER_BASE_URL}

vacme.keycloak.serverUrl=${VACME_KEYCLOAK_SERVERURL}
vacme.keycloak.realm=${VACME_KEYCLOAK_REALM}
vacme.keycloak.clientId=${VACME_KEYCLOAK_CLIENTID}
vacme.keycloak.clientSecret=${VACME_KEYCLOAK_CLIENTSECRET}
vacme.keycloak.username=${VACME_KEYCLOAK_USERNAME}
vacme.keycloak.password=${VACME_KEYCLOAK_PASSWORD}
# Realm vacme-reg
vacme.keycloak.reg.realm=${VACME_KEYCLOAK_REG_REALM}
vacme.keycloak.reg.clientSecret=${VACME_KEYCLOAK_REG_CLIENTSECRET}


#quarkus.log.level=DEBUG
# quarkus.log.category."io.quarkus.oidc".level=DEBUG
#quarkus.log.category."ch.dvbern.oss.vacme.service.booster".min-level=DEBUG
#quarkus.log.category."ch.dvbern.oss.vacme.service.booster".level=DEBUG


# Scheduler
quarkus.quartz.clustered=true

quarkus.quartz.store-type=jdbc_cmt

# Quarkus rest client config for VMDL Interface
vmdl-api/mp-rest/url=${VACME_VMDL_REST_URL}
vmdl-api/mp-rest/scope=javax.inject.Singleton

vmdl-api/mp-rest/keyStore=${VACME_VMDL_KEYSTORE_PATH}
vmdl-api/mp-rest/keyStorePassword=${VACME_VMDL_KEYSTORE_PASSWORD}
vmdl-api/mp-rest/keyStoreType=pkcs12

vmdl-auth-api/mp-rest/url=${VACME_VMDL_AUTH_REST_URL}
vmdl-auth-api/mp-rest/scope=javax.inject.Singleton

# Timeouts in ms
vmdl-auth-api/mp-rest/connectTimeout=6000
vmdl-auth-api/mp-rest/readTimeout=20000

vmdl.tenant_id=${VACME_VMDL_TENANT_ID}
vmdl.username=${VACME_VMDL_USERNAME}
vmdl.reporting_unit_id=${VACME_VMDL_REPORTING_UNIT_ID}
vmdl.client_id=${VACME_VMDL_CLIENT_ID}
vmdl.client_id.affenpocken=${VACME_VMDL_CLIENT_ID_AFFENPOCKEN}
vmdl.password=${VACME_VMDL_PASSWORD}
vmdl.client.logging.filter.disabled=${VACME_VMDL_CLIENT_LOGGING_FILTER_DISABLED}
vmdl.upload.chunk.limit=${VACME_VMDL_UPLOAD_CHUNK_LIMIT}
vmdl.cron.disabled=${VACME_VMDL_CRON_DISABLED}

### Rest Client fuer Well
# config through mp-rest properties
well-auth-api/mp-rest/connectTimeout=6000
well-auth-api/mp-rest/readTimeout=10000


well-auth-api/mp-rest/url=${VACME_WELL_AUTH_REST_URL}
well-api/mp-rest/url=${VACME_WELL_REST_URL}
well.api.client_id=${VACME_WELL_API_CLIENT_ID}
well.api.client_secret=${VACME_WELL_API_CLIENT_SECRET}

well.url=${WELL_URL}


# Es gibt 3 Gruppen pro Slot (also bei 30min-Slots: :00, :10, :20)
vacme.terminslot.offset.groups=3
# Erst ab 5 Terminen pro Slot kommen die Offsets zum Zug
vacme.terminslot.offset.min.termine.per.slot=5
# Erst ab 15 Terminen pro Slot werden wir teilen
vacme.terminslot.offset.max.termine.to.divide=${VACME_TERMINSLOT_OFFSET_MAX_TERMINE_TO_DIVIDE}

quarkus.hibernate-orm.log.sql=false

vacme.cron.archivierung.disabled=${VACME_ARCHIVIERUNG_DISABLED}
vacme.cron.archivierung=${VACME_ARCHIVIERUNG_SCHEDULED}


vacme.cron.check.zweittermine=${VACME_CRON_CHECK_ZWEITTERMINE}
vacme.cron.update.odi.no.termin=${VACME_CRON_UPDATE_NO_TERMINE}
vacme.cron.update.global.no.termin=${VACME_CRON_UPDATE_GLOBAL_NO_TERMINE}
vacme.cron.update.impfungen.for.kanton=${VACME_CRON_UPDATE_IMPFUNGEN_FOR_KANTON}
vacme.cron.doccreation.cleanup.maxage.seconds=14400

# CovidCert API
covid-cert-api/mp-rest/url=${VACME_COVIDAPI_PS_URL}
covid-cert-api/mp-rest/keyStore=${VACME_COVIDAPI_PS_KEYSTORE_PATH}
covid-cert-api/mp-rest/keyStorePassword=${VACME_COVIDAPI_PS_KEYSTORE_PASSWORD}
covid-cert-api/mp-rest/keyStoreType=${VACME_COVIDAPI_PS_KEYSTORE_TYPE}
# Timeouts in ms
covid-cert-api/mp-rest/connectTimeout=6000
covid-cert-api/mp-rest/readTimeout=20000


vacme.covidapi.ps.sleeptime.ms=500
# even minutes
vacme.cron.covidcert.api.creation=0 */2 * * * ?
# odd minutes
vacme.cron.covidcert.api.post.creation=0 1/2 * * * ?
# onboarding: every 5 minutes
vacme.cron.onboarding.post.creation=0 */5 * * * ?
vacme.cache.zertifikat.enabled.ttl.sconds=${VACME_CACHE_ZERTIFIKAT_ENABLED_TTL_SCONDS}
vacme.covidapi.ps.batchsize=200
vacme.covidcert.postable.eingang=${VACME_ZERTIFIKAT_POSTABLE_EINGANG}

# Contact Tracing
tracing.respect.choice=${TRACING_RESPECT_CHOICE}

# Google API
geocode.api.key=

# FHIR Template
vacme.fhir.path.customnarratives=classpath:/fhir/customnarratives.properties

# jaeger opentelemetry (fixed at build-time-property)
quarkus.opentelemetry.enabled=true